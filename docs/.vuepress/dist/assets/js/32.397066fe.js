(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{728:function(t,e,a){"use strict";a.r(e);var s=a(98),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"typeorm笔记"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typeorm笔记"}},[t._v("#")]),t._v(" TypeORM笔记")]),t._v(" "),a("h2",{attrs:{id:"数据库反向生成typeorm模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库反向生成typeorm模型"}},[t._v("#")]),t._v(" 数据库反向生成TypeORM模型")]),t._v(" "),a("blockquote",[a("h3",{attrs:{id:"方式一-使用-typeorm-model-generator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方式一-使用-typeorm-model-generator"}},[t._v("#")]),t._v(" 方式一 使用 "),a("code",[t._v("typeorm-model-generator")])]),t._v(" "),a("blockquote",[a("p",[t._v("typeorm-model-generator简单点就是将现有的数据库中的表使用命令的方式自动生成typeorm的数据模型(注意前提是数据库要有表)")])])]),t._v(" "),a("h4",{attrs:{id:"目前支持的数据库有"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目前支持的数据库有"}},[t._v("#")]),t._v(" 目前支持的数据库有")]),t._v(" "),a("ul",[a("li",[t._v("Microsoft SQL Server")]),t._v(" "),a("li",[t._v("PostgreSQL")]),t._v(" "),a("li",[t._v("MySQL")]),t._v(" "),a("li",[t._v("MariaDB")]),t._v(" "),a("li",[t._v("Oracle Database")]),t._v(" "),a("li",[t._v("SQLite")])]),t._v(" "),a("blockquote",[a("h3",{attrs:{id:"脚本参数提示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#脚本参数提示"}},[t._v("#")]),t._v(" 脚本参数提示")]),t._v(" "),a("ul",[a("li",[t._v("rm -rf entities表示先删除文件夹entities")]),t._v(" "),a("li",[t._v("npx typeorm-model-generator如果全局安装了就不需要加npx没有全局安装就加上去")]),t._v(" "),a("li",[a("code",[t._v("-h")]),t._v(" localhost -d 数据库名字 -p 端口 -u 用户名 -x 密码 -e 数据库类型")]),t._v(" "),a("li",[t._v("```-o`` entities表示输出到指定的文件夹")]),t._v(" "),a("li",[a("code",[t._v("--noConfig")]),t._v(" true表示不生成ormconfig.json和tsconfig.json文件")]),t._v(" "),a("li",[a("code",[t._v("--ce")]),t._v(" pascal表示将类名转换首字母是大写的驼峰命名")]),t._v(" "),a("li",[a("code",[t._v("--cp")]),t._v(" camel表示将数据库中的字段比如create_at转换为createAt")]),t._v(" "),a("li",[a("code",[t._v("-a")]),t._v("表示会继承一个BaseEntity的类,根据自己需求加")])])]),t._v(" "),a("h4",{attrs:{id:"如何使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何使用"}},[t._v("#")]),t._v(" 如何使用")]),t._v(" "),a("ol",[a("li",[t._v("全局安装模块(也可以使用npx,但是这种方式生成数据模型的时候会有点慢)")])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" i -g typeorm-model-generator\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("新创建一个文件夹")]),t._v(" "),a("li",[t._v("新建package.json的文件")]),t._v(" "),a("li",[t._v("在package.json文件下的scripts配置命令")])]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scripts"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"db"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rm -rf entities & npx typeorm-model-generator -h localhost -d testdabase -p 3306 -u root -x root -e mysql -o entities --noConfig true --ce pascal --cp camel"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ol",{attrs:{start:"5"}},[a("li",[t._v("直接运行命令就可以在entities文件夹下生成全部的数据模型(目前格式有点丑,需要自己手动调整下)")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("npn run db \n")])])]),a("ol",{attrs:{start:"6"}},[a("li",[t._v("如果成功,则会在package.json同级目录可以看到entities文件夹")])])])}),[],!1,null,null,null);e.default=r.exports}}]);